/* ==========================================================================
   ARQUIVO DE SCRIPTS - AGIMOB
   ========================================================================== */
'use strict';

document.addEventListener('DOMContentLoaded', () => {

    /* [1] NAVBAR ----------------------------------------------------------- */
    const hamburger = document.querySelector(".hamburger");
    const navMenu = document.querySelector(".nav-menu");
    if (hamburger && navMenu) {
        const navLinks = document.querySelectorAll(".nav-link");
        const toggleMobileMenu = () => {
            hamburger.classList.toggle("active");
            navMenu.classList.toggle("active");
        };
        const closeMobileMenu = () => {
            hamburger.classList.remove("active");
            navMenu.classList.remove("active");
        };
        hamburger.addEventListener("click", toggleMobileMenu);
        navLinks.forEach(link => link.addEventListener("click", closeMobileMenu));
    }

    /* [2] CARROSSEL -------------------------------------------------------- */
    const track = document.querySelector('.carousel-track');
    if (track) {
        const slides = Array.from(track.children);
        const dots = document.querySelectorAll('.carousel-pagination .dot');
        const prevButton = document.querySelector('.carousel-button.prev');
        const nextButton = document.querySelector('.carousel-button.next');

        if (slides.length > 0 && prevButton && nextButton) {
            const slideWidth = slides[0].getBoundingClientRect().width;

            const goToSlide = (targetIndex) => {
                const offset = slideWidth * targetIndex;
                track.style.transform = `translateX(-${offset}px)`;
                const currentSlide = track.querySelector('.active');
                if (currentSlide) currentSlide.classList.remove('active');
                slides[targetIndex].classList.add('active');

                const currentDot = document.querySelector('.carousel-pagination .active');
                if (currentDot) currentDot.classList.remove('active');
                if (dots[targetIndex]) dots[targetIndex].classList.add('active');

                prevButton.disabled = (targetIndex === 0);
                nextButton.disabled = (targetIndex === slides.length - 1);
            };

            nextButton.addEventListener('click', () => {
                const currentSlide = track.querySelector('.active');
                const currentIndex = slides.findIndex(slide => slide === currentSlide);
                const nextIndex = currentIndex + 1;
                if (nextIndex < slides.length) goToSlide(nextIndex);
            });

            prevButton.addEventListener('click', () => {
                const currentSlide = track.querySelector('.active');
                const currentIndex = slides.findIndex(slide => slide === currentSlide);
                const prevIndex = currentIndex - 1;
                if (prevIndex >= 0) goToSlide(prevIndex);
            });

            dots.forEach(dot => {
                dot.addEventListener('click', e => {
                    const targetIndex = parseInt(e.target.dataset.slide);
                    if (!isNaN(targetIndex)) goToSlide(targetIndex);
                });
            });
        }
    }

    /* [3] CALCULADORA ------------------------------------------------------ */
    const form = document.getElementById('financing-form');
    if (form) {
        const formatCurrencyInput = (input) => {
            let value = input.value.replace(/\D/g, '');
            if (value === '') {
                input.value = '';
                return;
            }
            input.value = new Intl.NumberFormat('pt-BR').format(value);
        };

        const currencyInputs = document.querySelectorAll('#valor-imovel, #valor-entrada, #renda-bruta, #renda-conjuge');
        currencyInputs.forEach(input => input.addEventListener('input', () => formatCurrencyInput(input)));

        const incluirParticipanteCheckbox = document.getElementById('incluir-participante');
        const conjugeField = document.querySelector('.conjuge-field');
        const resultadoDiv = document.getElementById('resultado-simulacao');
        const resultsPlaceholder = resultadoDiv?.querySelector('.results-placeholder');
        const resultsContent = resultadoDiv?.querySelector('.results-content');
        const resultadoSAC = document.getElementById('resultado-sac');
        const resultadoPrice = document.getElementById('resultado-price');
        const btnBaixarPDF = document.getElementById('btn-baixar-pdf');
        const btnEnviarEmail = document.getElementById('btn-enviar-email');
        const emailPopup = document.getElementById('email-popup');
        const emailForm = document.getElementById('email-form');
        const popupCloseBtn = document.querySelector('.popup-close');

        if (incluirParticipanteCheckbox && conjugeField) {
            incluirParticipanteCheckbox.addEventListener('change', () => {
                conjugeField.classList.toggle('hidden');
            });
        }

        const parseCurrency = (value) =>
            (typeof value === 'string' ? Number(value.replace(/\D/g, '')) || 0 : 0);

        /* === Envio dos dados para o backend === */
form.addEventListener('submit', (e) => {
    e.preventDefault();

    const dadosParaEnviar = {
        valorImovel: parseCurrency(document.getElementById('valor-imovel').value),
        valorEntrada: parseCurrency(document.getElementById('valor-entrada').value),
        prazoAnos: parseInt(document.getElementById('prazo-anos').value) || 0,
        rendaBruta: parseCurrency(document.getElementById('renda-bruta').value),
        incluirParticipante: document.getElementById('incluir-participante').checked,
        rendaConjuge: parseCurrency(document.getElementById('renda-conjuge').value),
        tipo: document.getElementById('modalidade').value
    };

    const urlDoBackend = 'http://localhost:8080/agimob/simulacao'; 
    const submitButton = form.querySelector('.cta-button');
    if (submitButton) {
        submitButton.textContent = 'Calculando...';
        submitButton.disabled = true;
    }

    // Esconde os resultados antigos e mostra a mensagem de "carregando"
    if (resultsContent) resultsContent.classList.remove('active');
    if (resultsPlaceholder) resultsPlaceholder.classList.add('active');


    fetch(urlDoBackend, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(dadosParaEnviar)
    })
    .then(response => {
        if (!response.ok) {
            // Se a resposta não for OK, lança um erro para cair no .catch()
            throw new Error('Erro na resposta do servidor. Status: ' + response.status);
        }
        return response.json(); // Converte a resposta para JSON
    })
    .then(resultados => {
        // --- INÍCIO DA ATUALIZAÇÃO ---
        
        // 1. Adicione um log para ver o que o backend retornou
        console.log("Dados recebidos do backend:", resultados);

        // 2. Chama a função para preencher os dados da tabela SAC
        //    É crucial que o backend retorne um objeto com a chave "sac"
        preencherDados('sac', resultados.sac);

        // 3. Chama a função para preencher os dados da tabela Price
        //    É crucial que o backend retorne um objeto com a chave "price"
        preencherDados('price', resultados.price);

        // 4. Esconde a mensagem de placeholder e exibe a div com os resultados
        if (resultsPlaceholder) resultsPlaceholder.classList.remove('active');
        if (resultsContent) resultsContent.classList.add('active');

        // --- FIM DA ATUALIZAÇÃO ---
    })
    .catch(error => {
        console.error('Ocorreu um erro na simulação:', error);
        alert('Não foi possível obter a simulação. Verifique o console para mais detalhes.');
    })
    .finally(() => {
        // Este bloco sempre executa, com sucesso ou erro
        if (submitButton) {
            submitButton.textContent = 'Calcular Financiamento';
            submitButton.disabled = false;
        }
    });
});

/* === Função de preenchimento === */
const preencherDados = (sistema, data) => {
    // Se não houver dados para um sistema (ex: backend só retornou SAC), não faz nada
    if (!data) return;

    // Converte os valores numéricos para o formato de moeda brasileiro
    const formatarMoeda = (valor) => 
        new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(valor);

    if (sistema === 'sac') {
        // Certifique-se que os IDs no HTML correspondem exatamente a estes abaixo
        document.getElementById('sac-primeira-parcela').textContent = formatarMoeda(data.primeiraParcela);
        document.getElementById('sac-ultima-parcela').textContent = formatarMoeda(data.ultimaParcela);
        document.getElementById('sac-total-juros').textContent = formatarMoeda(data.totalJuros);
        document.getElementById('sac-total-pago').textContent = formatarMoeda(data.totalPago);
        if (resultadoSAC) resultadoSAC.style.display = 'block'; // Garante que a tabela seja exibida
    }
    
    if (sistema === 'price') {
        // Certifique-se que os IDs no HTML correspondem exatamente a estes abaixo
        document.getElementById('price-parcela-fixa').textContent = formatarMoeda(data.parcelaFixa);
        document.getElementById('price-total-juros').textContent = formatarMoeda(data.totalJuros);
        document.getElementById('price-total-pago').textContent = formatarMoeda(data.totalPago);
        if (resultadoPrice) resultadoPrice.style.display = 'block'; // Garante que a tabela seja exibida
    }
};
}); // fim do DOMContentLoaded
