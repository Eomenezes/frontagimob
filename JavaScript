/* ==========================================================================
   ARQUIVO DE SCRIPTS - AGIMOB
   ========================================================================== */
'use strict';

document.addEventListener('DOMContentLoaded', () => {

    /* [1] NAVBAR ----------------------------------------------------------- */
    const hamburger = document.querySelector(".hamburger");
    const navMenu = document.querySelector(".nav-menu");
    if (hamburger && navMenu) {
        const navLinks = document.querySelectorAll(".nav-link");
        const toggleMobileMenu = () => {
            hamburger.classList.toggle("active");
            navMenu.classList.toggle("active");
        };
        const closeMobileMenu = () => {
            hamburger.classList.remove("active");
            navMenu.classList.remove("active");
        };
        hamburger.addEventListener("click", toggleMobileMenu);
        navLinks.forEach(link => link.addEventListener("click", closeMobileMenu));
    }

    /* [2] CARROSSEL -------------------------------------------------------- */
    const track = document.querySelector('.carousel-track');
    if (track) {
        const slides = Array.from(track.children);
        const dots = document.querySelectorAll('.carousel-pagination .dot');
        const prevButton = document.querySelector('.carousel-button.prev');
        const nextButton = document.querySelector('.carousel-button.next');

        if (slides.length > 0) {
            const slideWidth = slides[0].getBoundingClientRect().width;

            const goToSlide = (targetIndex) => {
                const offset = slideWidth * targetIndex;
                track.style.transform = `translateX(-${offset}px)`;
                const currentSlide = track.querySelector('.active');
                if (currentSlide) currentSlide.classList.remove('active');
                slides[targetIndex].classList.add('active');
                const currentDot = document.querySelector('.carousel-pagination .active');
                if (currentDot) currentDot.classList.remove('active');
                dots[targetIndex].classList.add('active');
                prevButton.disabled = (targetIndex === 0);
                nextButton.disabled = (targetIndex === slides.length - 1);
            };

            nextButton.addEventListener('click', () => {
                const currentSlide = track.querySelector('.active');
                const currentIndex = slides.findIndex(slide => slide === currentSlide);
                const nextIndex = currentIndex + 1;
                if (nextIndex < slides.length) goToSlide(nextIndex);
            });

            prevButton.addEventListener('click', () => {
                const currentSlide = track.querySelector('.active');
                const currentIndex = slides.findIndex(slide => slide === currentSlide);
                const prevIndex = currentIndex - 1;
                if (prevIndex >= 0) goToSlide(prevIndex);
            });

            dots.forEach(dot => {
                dot.addEventListener('click', e => {
                    const targetIndex = parseInt(e.target.dataset.slide);
                    goToSlide(targetIndex);
                });
            });
        }
    }

    /* [3] CALCULADORA ------------------------------------------------------ */
    const form = document.getElementById('financing-form');
    if (form) {
        const formatCurrencyInput = (input) => {
            let value = input.value.replace(/\D/g, '');
            if (value === '') { input.value = ''; return; }
            input.value = new Intl.NumberFormat('pt-BR').format(value);
        };

        const currencyInputs = document.querySelectorAll('#valor-imovel, #valor-entrada, #renda-bruta, #renda-conjuge');
        currencyInputs.forEach(input => input.addEventListener('input', () => formatCurrencyInput(input)));

        const incluirParticipanteCheckbox = document.getElementById('incluir-participante');
        const conjugeField = document.querySelector('.conjuge-field');
        const resultadoDiv = document.getElementById('resultado-simulacao');
        const resultsPlaceholder = resultadoDiv.querySelector('.results-placeholder');
        const resultsContent = resultadoDiv.querySelector('.results-content');
        const resultadoSAC = document.getElementById('resultado-sac');
        const resultadoPrice = document.getElementById('resultado-price');
        const btnBaixarPDF = document.getElementById('btn-baixar-pdf');
        const btnEnviarEmail = document.getElementById('btn-enviar-email');
        const emailPopup = document.getElementById('email-popup');
        const emailForm = document.getElementById('email-form');
        const popupCloseBtn = document.querySelector('.popup-close');

        incluirParticipanteCheckbox.addEventListener('change', () => {
            conjugeField.classList.toggle('hidden');
        });

        const parseCurrency = (value) => (typeof value === 'string' ? Number(value.replace(/\D/g, '')) || 0 : 0);

        /* === Envio dos dados para o backend === */
        form.addEventListener('submit', (e) => {
            e.preventDefault();

            const dadosParaEnviar = {
                valorImovel: parseCurrency(document.getElementById('valor-imovel').value),
                valorEntrada: parseCurrency(document.getElementById('valor-entrada').value),
                prazoAnos: parseInt(document.getElementById('prazo-anos').value) || 0,
                rendaBruta: parseCurrency(document.getElementById('renda-bruta').value),
                incluirParticipante: document.getElementById('incluir-participante').checked,
                rendaConjuge: parseCurrency(document.getElementById('renda-conjuge').value)
            };

            const urlDoBackend = 'http://localhost8080/agimob/simulacao'; // troque pela URL real
            const submitButton = form.querySelector('.cta-button');
            submitButton.textContent = 'Calculando...';
            submitButton.disabled = true;

            fetch(urlDoBackend, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(dadosParaEnviar)
            })
            .then(response => {
                if (!response.ok) throw new Error('Erro ao processar a simulação.');
                return response.json();
            })
            .then(resultados => {
                preencherDados('sac', resultados.sac);
                preencherDados('price', resultados.price);
                resultsPlaceholder.classList.remove('active');
                resultsContent.classList.add('active');
            })
            .catch(error => {
                console.error('Erro:', error);
                alert('Não foi possível conectar ao servidor. Tente novamente.');
            })
            .finally(() => {
                submitButton.textContent = 'Calcular Financiamento';
                submitButton.disabled = false;
            });
        });

        /* === Função de preenchimento === */
        const preencherDados = (sistema, data) => {
            if (!data) return;
            if (sistema === 'sac') {
                document.getElementById('sac-primeira-parcela').textContent = data.primeiraParcela;
                document.getElementById('sac-ultima-parcela').textContent = data.ultimaParcela;
                document.getElementById('sac-total-juros').textContent = data.totalJuros;
                document.getElementById('sac-total-pago').textContent = data.totalPago;
                resultadoSAC.style.display = 'block';
            }
            if (sistema === 'price') {
                document.getElementById('price-parcela-fixa').textContent = data.parcelaFixa;
                document.getElementById('price-total-juros').textContent = data.totalJuros;
                document.getElementById('price-total-pago').textContent = data.totalPago;
                resultadoPrice.style.display = 'block';
            }
        };

        /* === PDF e Popup === */
        const togglePopup = () => emailPopup.classList.toggle('active');
        btnEnviarEmail.addEventListener('click', togglePopup);
        popupCloseBtn.addEventListener('click', togglePopup);
        emailPopup.addEventListener('click', (e) => { if (e.target === emailPopup) togglePopup(); });
        emailForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const email = document.getElementById('email-input').value;
            alert(`Simulação enviada para ${email} (modo demonstração).`);
            togglePopup();
            emailForm.reset();
        });
    }

}); // fim do DOMContentLoaded
